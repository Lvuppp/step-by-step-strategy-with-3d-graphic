import QtQuick 2.5
import QtQuick.Window 2.2
import game.engine 1.0

Window {
    id: root
    visible: true

    width: 800
    height: 800

    // размеры тайла
    // все помнят, что он квадратный? Именно поэтому необходимо уточнить
    // "видимую" часть тайла, а именно размер по ширине и по высоте
    property double scale: 1.0
    property double tilesize: 128 * scale
    property double tilesizew: tilesize
    property double tilesizeh: tilesizew / 2

    // количество тайлов по X и по Y (столбцы и строки соотв.)
    property int mapcols: 8
    property int maprows: mapcols * 3

    Item {
        id: gamearea

        clip: false // true для скрытия краёв

        width: root.width/2
        height: root.height/2
        x: width/2
        y: height/2

        Flickable {
            id: maparea

            contentWidth: map.width - tilesizew * 1.5
            contentHeight: map.height - tilesizeh / 2

            width: gamearea.width
            height: gamearea.height

            boundsBehavior: Flickable.StopAtBounds

            Item {
                id: map

                width: mapcols * tilesizew + tilesizew
                height: maprows * tilesizeh / 2
                x: -tilesizew / 2
                y: -tilesizeh / 2

                MapProvider {
                    id: mapprovider

                    width: gamearea.width + tilesizew*2
                    height: gamearea.height + tilesizeh*2

                    x: maparea.contentX + (tilesizew/2 - maparea.contentX%tilesizew + map.x)
                    y: maparea.contentY + (tilesizeh/2 - maparea.contentY%tilesizeh + map.y)

                    cx: maparea.contentX
                    cy: maparea.contentY

                    tilesize: root.tilesize
                    tilesizew: root.tilesizew
                    tilesizeh: root.tilesizeh
                    mapcols: root.mapcols
                    maprows: root.maprows
                    mapdata: [
                       /* 00     01     02     03     04     05     06     07 */
               /* 00 */ "0004","0004","0004","0004","0004","0004","0004","0004",
               /* 01 */ "0004","0004","0004","0004","0004","0004","0004","0004",
               /* 02 */ "0004","0004","0004","0004","0004","0004","0004","0004",
               /* 03 */ "0004","0004","0004","0004","0004","0004","0004","0004",
               /* 04 */ "0004","0004","0004","0004","0004","0004","0004","0004",
               /* 05 */ "0004","0004","0004","0004","0004","0004","0004","0004",
               /* 06 */ "0004","0004","0004","0004","0001","0001","0004","0004",
               /* 07 */ "0004","0004","0004","0004","0001","0004","0004","0004",
               /* 08 */ "0004","0004","0001","0001","0001","0001","0001","0004",
               /* 09 */ "0004","0001","0004","0001","0004","0001","0004","0004",
               /* 10 */ "0004","0004","0004","0004","0001","0004","0004","0004",
               /* 11 */ "0004","0001","0004","0001","0004","0004","0004","0004",
               /* 12 */ "0004","0004","0001","0004","0001","0004","0004","0004",
               /* 13 */ "0004","0004","0001","0001","0004","0004","0004","0004",
               /* 14 */ "0004","0004","0004","0004","0004","0004","0004","0004",
               /* 15 */ "0004","0004","0004","0004","0004","0004","0004","0004",
               /* 16 */ "0004","0004","0004","0004","0004","0004","0004","0004",
               /* 17 */ "0004","0004","0004","0004","0004","0004","0004","0004",
               /* 18 */ "0004","0004","0004","0004","0004","0004","0004","0004",
               /* 19 */ "0004","0004","0004","0004","0004","0004","0004","0004",
               /* 20 */ "0004","0004","0004","0004","0004","0004","0004","0004",
               /* 21 */ "0004","0004","0004","0004","0004","0004","0004","0004",
               /* 22 */ "0004","0004","0004","0004","0004","0004","0004","0004",
               /* 23 */ "0004","0004","0004","0004","0004","0004","0004","0004",
               /* 24 */ "0004","0004","0004","0004","0004","0004","0004","0004",
               /* 25 */ "0004","0004","0004","0004","0004","0004","0004","0004",
               /* 26 */ "0004","0004","0004","0004","0004","0004","0004","0004",
               /* 27 */ "0004","0004","0004","0004","0004","0004","0004","0004",
               /* 28 */ "0004","0004","0004","0004","0004","0004","0004","0004",
               /* 29 */ "0004","0004","0004","0004","0004","0004","0004","0004",
               /* 30 */ "0004","0004","0004","0004","0004","0004","0004","0004",
               /* 31 */ "0004","0004","0004","0004","0004","0004","0004","0004"
                    ]
                }
            }
        }
    }

    Rectangle {
        id: gameareaborder

        width: root.width/2
        height: root.height/2
        x: width/2
        y: height/2

        border.width: 1
        border.color: "red"
        color: "transparent"

        visible: true
    }
}

